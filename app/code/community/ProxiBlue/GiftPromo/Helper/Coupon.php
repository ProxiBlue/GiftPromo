<?php

/**
 * Helper for coupon codes creating and managing
 */
class ProxiBlue_GiftPromo_Helper_Coupon extends Mage_Core_Helper_Abstract
{
    /**
     * Constants which defines all possible coupon codes formats
     */
    const COUPON_FORMAT_ALPHANUMERIC = 'alphanum';
    const COUPON_FORMAT_ALPHABETICAL = 'alpha';
    const COUPON_FORMAT_NUMERIC = 'num';

    /**
     * Defines type of Coupon
     */
    const COUPON_TYPE_SPECIFIC_AUTOGENERATED = 1;

    /**
     * XML paths to coupon codes generation options
     */
    const XML_PATH_SALES_RULE_COUPON_LENGTH = 'promo/auto_generated_coupon_codes/length';
    const XML_PATH_SALES_RULE_COUPON_FORMAT = 'promo/auto_generated_coupon_codes/format';
    const XML_PATH_SALES_RULE_COUPON_PREFIX = 'promo/auto_generated_coupon_codes/prefix';
    const XML_PATH_SALES_RULE_COUPON_SUFFIX = 'promo/auto_generated_coupon_codes/suffix';
    const XML_PATH_SALES_RULE_COUPON_DASH_INTERVAL = 'promo/auto_generated_coupon_codes/dash';

    /**
     * Config path for character set and separator
     */
    const XML_CHARSET_NODE = 'global/salesrule/coupon/charset/%s';
    const XML_CHARSET_SEPARATOR = 'global/salesrule/coupon/separator';

    /**
     * Get all possible coupon codes formats
     *
     * @return array
     */
    public function getFormatsList()
    {
        return array(
            self::COUPON_FORMAT_ALPHANUMERIC => $this->__('Alphanumeric'),
            self::COUPON_FORMAT_ALPHABETICAL => $this->__('Alphabetical'),
            self::COUPON_FORMAT_NUMERIC => $this->__('Numeric'),
        );
    }

    /**
     * Get default coupon code length
     *
     * @return int
     */
    public function getDefaultLength()
    {
        return (int)Mage::getStoreConfig(self::XML_PATH_SALES_RULE_COUPON_LENGTH);
    }

    /**
     * Get default coupon code format
     *
     * @return int
     */
    public function getDefaultFormat()
    {
        return Mage::getStoreConfig(self::XML_PATH_SALES_RULE_COUPON_FORMAT);
    }

    /**
     * Get default coupon code prefix
     *
     * @return string
     */
    public function getDefaultPrefix()
    {
        return Mage::getStoreConfig(self::XML_PATH_SALES_RULE_COUPON_PREFIX);
    }

    /**
     * Get default coupon code suffix
     *
     * @return string
     */
    public function getDefaultSuffix()
    {
        return Mage::getStoreConfig(self::XML_PATH_SALES_RULE_COUPON_SUFFIX);
    }

    /**
     * Get dashes occurrences frequency in coupon code
     *
     * @return int
     */
    public function getDefaultDashInterval()
    {
        return (int)Mage::getStoreConfig(self::XML_PATH_SALES_RULE_COUPON_DASH_INTERVAL);
    }

    /**
     * Get Coupon's alphabet as array of chars
     *
     * @param  string $format
     *
     * @return array|bool
     */
    public function getCharset($format)
    {
        return str_split((string)Mage::app()->getConfig()->getNode(sprintf(self::XML_CHARSET_NODE, $format)));
    }

    /**
     * Retrieve Separator from config
     *
     * @return string
     */
    public function getCodeSeparator()
    {
        return (string)Mage::app()->getConfig()->getNode(Mage_SalesRule_Helper_Coupon::XML_CHARSET_SEPARATOR);
    }

    /**
     * Generate the coupon code
     *
     * @return boolean
     * @throws Exception
     */
    public function generateCouponCode($rule)
    {
        $data = array(
            'rule_id' => $rule->getId(),
            'qty' => 1,
            'length' => $rule->getData('coupon_length'),
            'format' => $rule->getData('coupon_format'),
            'prefix' => $rule->getData('coupon_prefix'),
            'suffix' => $rule->getData('coupon_suffix'),
            'dash' => 0,
            'uses_per_coupon' => 1,
            'uses_per_customer' => 1,
            'to_date' => $rule->getToDate(),
        );
        if (!$rule->getId()) {
            throw new Exception('Shopping Cart Rule ID could not be found - did you configure the rule?');
        } else {
            try {
                $generator = $rule->getCouponMassGenerator();
                if (!$generator->validateData($data)) {
                    throw new Exception('Not valid data provided to use coupon mass generator!');
                } else {
                    $generator->setData($data);
                    $coupon = $generator->generatePool();
                    return $coupon->getCode();
                }
            } catch (Exception $e) {
                mage::log($e);
            }
        }
        return false;
    }

    /**
     * Send coupon code to subscripber
     *
     * @param object $email
     * @param object $couponcode
     * @param object $object
     * @param object $rule
     */
    public function emailCouponCode($email, $couponCode, $object, $rule)
    {
        // Set sender information
        $senderName = Mage::getStoreConfig('trans_email/ident_general/name');
        $senderEmail = Mage::getStoreConfig('trans_email/ident_general/email');
        $sender = array(
            'name' => $senderName,
            'email' => $senderEmail
        );
        $storeId = Mage::app()->getStore()->getId();
        $transactional = Mage::getModel('core/email_template');
        $vars = array(
            'coupon' => $couponCode,
            'object' => $object,
            'rule' => $rule
        );
        try {
            $transactional->sendTransactional(
                $rule->getData('coupon_email_code'), $sender,
                $email, null, $vars, $storeId
            );
        } catch (Exception $e) {
            mage::logException($e);

        }
    }
}
